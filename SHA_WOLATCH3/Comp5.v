// -------------------------------------------------------------
// 
// File Name: hdlsrc/expander_power_opt/Comp5.v
// Created: 2022-08-12 14:04:02
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Comp5
// Source Path: expander_power_opt/Hardware/SHA1/Compressor1/Comp5
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Comp5
          (clk,
           W,
           K,
           A_IN,
           B_IN,
           C_IN,
           D_IN,
           E_IN,
           F_IN,
           G_IN,
           H_OUT,
           A_OUT,
           B_OUT,
           C_OUT,
           D_OUT,
           E_OUT,
           F_OUT,
           G_OUT,
           H_OUT_1);


  input   clk;
  input   [31:0] W;  // uint32
  input   [31:0] K;  // uint32
  input   [31:0] A_IN;  // uint32
  input   [31:0] B_IN;  // uint32
  input   [31:0] C_IN;  // uint32
  input   [31:0] D_IN;  // uint32
  input   [31:0] E_IN;  // uint32
  input   [31:0] F_IN;  // uint32
  input   [31:0] G_IN;  // uint32
  input   [31:0] H_OUT;  // uint32
  output  [31:0] A_OUT;  // uint32
  output  [31:0] B_OUT;  // uint32
  output  [31:0] C_OUT;  // uint32
  output  [31:0] D_OUT;  // uint32
  output  [31:0] E_OUT;  // uint32
  output  [31:0] F_OUT;  // uint32
  output  [31:0] G_OUT;  // uint32
  output  [31:0] H_OUT_1;  // uint32


  reg [31:0] A_IN_REG_out1;  // uint32
  wire [31:0] SIGMA0_out1;  // uint32
  wire [31:0] MAJ_out1;  // uint32
  reg [31:0] D_IN_REG_out1;  // uint32
  wire [31:0] Subsystem3_out1;  // uint32
  reg [31:0] E_IN_REG_out1;  // uint32
  wire [31:0] ADD12_out1;  // uint32
  wire [31:0] SIGMA1_out1;  // uint32
  reg [31:0] F_IN_REG_out1;  // uint32
  reg [31:0] G_IN_REG_out1;  // uint32
  wire [31:0] CH_out1;  // uint32
  wire [31:0] Subsystem1_out1;  // uint32
  wire [31:0] Subsystem2_out1;  // uint32


  always @(*)
 // if(clk == 1'b1)
 // begin
    begin : A_IN_REG_process
      A_IN_REG_out1 <= A_IN;
    end
 // end



  SIGMA0 u_SIGMA0 (.X(A_IN_REG_out1),  // uint32
                           .OUT(SIGMA0_out1)  // uint32
                           );

  MAJ u_MAJ (.X(A_IN_REG_out1),  // uint32
                     .Y(B_IN),  // uint32
                     .Z(C_IN),  // uint32
                     .OUT(MAJ_out1)  // uint32
                     );

  always @(*)
 // if(clk == 1'b1)
 // begin
    begin : D_IN_REG_process
      D_IN_REG_out1 <= D_IN;
    end
 // end



  alpha3_1adder  u_Subsystem3 (SIGMA0_out1,  // uint32
                                   MAJ_out1,  // uint32
                                   D_IN_REG_out1,  // uint32
                                   Subsystem3_out1  // uint32
                                   );

  assign A_OUT = Subsystem3_out1;

  assign B_OUT = A_IN_REG_out1;

  assign C_OUT = B_IN;

  always @(*)
 // if(clk == 1'b1)
 // begin
    begin : E_IN_REG_process
      E_IN_REG_out1 <= E_IN;
    end
 // end



  assign ADD12_out1 = E_IN_REG_out1 - C_IN;



  assign D_OUT = ADD12_out1;

  SIGMA1 u_SIGMA1 (.X(E_IN_REG_out1),  // uint32
                           .OUT(SIGMA1_out1)  // uint32
                           );

  always @(*)
 // if(clk == 1'b1)
 // begin
    begin : F_IN_REG_process
      F_IN_REG_out1 <= F_IN;
    end
 // end



  always @(*)
 // if(clk == 1'b1)
 // begin
    begin : G_IN_REG_process
      G_IN_REG_out1 <= G_IN;
    end
 // end



  CH u_CH (.X(E_IN_REG_out1),  // uint32
                   .Y(F_IN_REG_out1),  // uint32
                   .Z(G_IN_REG_out1),  // uint32
                   .OUT(CH_out1)  // uint32
                   );

  alpha3_1adder u_Subsystem1 (H_OUT,  // uint32
                                   SIGMA1_out1,  // uint32
                                   CH_out1,  // uint32
                                   Subsystem1_out1  // uint32
                                   );

  assign E_OUT = Subsystem1_out1;

  assign F_OUT = E_IN_REG_out1;

  assign G_OUT = F_IN_REG_out1;

  alpha4_1adder  u_Subsystem2 (.A(A_IN_REG_out1),  // uint32
                                   .B(G_IN_REG_out1),  // uint32
                                   .C(W),  // uint32
                                   .D(K),  // uint32
                                   .Out1(Subsystem2_out1)  // uint32
                                   );

  assign H_OUT_1 = Subsystem2_out1;

endmodule  // Comp5

