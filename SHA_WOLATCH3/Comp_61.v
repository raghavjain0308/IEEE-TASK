// -------------------------------------------------------------
// 
// File Name: hdlsrc/expander_power_opt/Comp_61.v
// Created: 2022-08-12 14:04:08
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Comp_61
// Source Path: expander_power_opt/Hardware/SHA2/Compressor2/Comp_61
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Comp_61
          (clk,
           E_IN,
           F_IN,
           G_IN,
           H_OUT,
           E_OUT1,
           E_OUT);


  input   clk;
  input   [31:0] E_IN;  // uint32
  input   [31:0] F_IN;  // uint32
  input   [31:0] G_IN;  // uint32
  input   [31:0] H_OUT;  // uint32
  output  [31:0] E_OUT1;  // uint32
  output  [31:0] E_OUT;  // uint32


  reg [31:0] E_IN_REG_out1;  // uint32
  wire [31:0] SIGMA1_out1;  // uint32
  reg [31:0] F_IN_REG_out1;  // uint32
  reg [31:0] G_IN_REG_out1;  // uint32
  wire [31:0] CH_out1;  // uint32
  wire [31:0] Add5_stage2_add_temp;  // ufix32
  wire [32:0] Add5_op_stage1;  // ufix33
  reg [31:0] H_IN_REG1_out1;  // uint32
  wire [31:0] Add5_stage3_add_cast;  // ufix32
  wire [31:0] Add5_out1;  // uint32


  always @(*)
 // if(clk == 1'b1)
 // begin
    begin : E_IN_REG_process
      E_IN_REG_out1 <= E_IN;
    end
//  end



  SIGMA1 u_SIGMA1 (.X(E_IN_REG_out1),  // uint32
                            .OUT(SIGMA1_out1)  // uint32
                            );

  always @(*)
 // if(clk == 1'b1)
 // begin
    begin : F_IN_REG_process
      F_IN_REG_out1 <= F_IN;
    end
 // end



  always @(*)
 // if(clk == 1'b1)
 // begin
    begin : G_IN_REG_process
      G_IN_REG_out1 <= G_IN;
    end
 // end



  CH u_CH (.X(E_IN_REG_out1),  // uint32
                    .Y(F_IN_REG_out1),  // uint32
                    .Z(G_IN_REG_out1),  // uint32
                    .OUT(CH_out1)  // uint32
                    );

  assign Add5_stage2_add_temp = SIGMA1_out1 + CH_out1;
  assign Add5_op_stage1 = {1'b0, Add5_stage2_add_temp};



  always @(*)
 // if(clk == 1'b1)
//  begin
    begin : H_IN_REG1_process
      H_IN_REG1_out1 <= H_OUT;
    end
 // end



  assign Add5_stage3_add_cast = Add5_op_stage1[31:0];
  assign Add5_out1 = Add5_stage3_add_cast + H_IN_REG1_out1;



  assign E_OUT1 = Add5_out1;

  assign E_OUT = E_IN_REG_out1;

endmodule  // Comp_61

