// -------------------------------------------------------------
// 
// File Name: hdlsrc/expander_power_opt/Comp_1.v
// Created: 2022-08-12 14:04:04
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Comp_1
// Source Path: expander_power_opt/Hardware/SHA2/Compressor2/Comp_1
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Comp_1
          (
           W3,
           A_IN,
           B_IN,
           C_IN,
           D_IN,
           E_IN,
           F_IN,
           G_IN,
           H_OUT,
           A_OUT,
           B_OUT,
           C_OUT,
           D_OUT,
           E_OUT,
           F_OUT,
           G_OUT,
           H_OUT_1);


  
  input   [31:0] W3;  // uint32
  input   [31:0] A_IN;  // uint32
  input   [31:0] B_IN;  // uint32
  input   [31:0] C_IN;  // uint32
  input   [31:0] D_IN;  // uint32
  input   [31:0] E_IN;  // uint32
  input   [31:0] F_IN;  // uint32
  input   [31:0] G_IN;  // uint32
  input   [31:0] H_OUT;  // uint32
  output  [31:0] A_OUT;  // uint32
  output  [31:0] B_OUT;  // uint32
  output  [31:0] C_OUT;  // uint32
  output  [31:0] D_OUT;  // uint32
  output  [31:0] E_OUT;  // uint32
  output  [31:0] F_OUT;  // uint32
  output  [31:0] G_OUT;  // uint32
  output  [31:0] H_OUT_1;  // uint32


  reg [31:0] E_IN_REG_out1;  // uint32
  wire [31:0] ADD4_out1;  // uint32
  wire [31:0] SIGMA1_out1;  // uint32
  wire [31:0] CH_out1;  // uint32
  reg [31:0] H_IN_REG1_out1;  // uint32
  wire [31:0] Subsystem3_out1;  // uint32
  wire [31:0] Constant_out1;  // uint32
  wire [31:0] ADD8_out1;  // uint32


  assign A_OUT = A_IN;

  assign B_OUT = B_IN;

  assign C_OUT = C_IN;

  


  assign ADD4_out1 = E_IN - D_IN;



  assign D_OUT = ADD4_out1;

  SIGMA1 u_SIGMA1 (.X(E_IN),  // uint32
                           .OUT(SIGMA1_out1)  // uint32
                           );

  CH u_CH (.X(E_IN),  // uint32
                   .Y(F_IN),  // uint32
                   .Z(G_IN),  // uint32
                   .OUT(CH_out1)  // uint32
                   );

  


  alpha3_1adder u_Subsystem3 (SIGMA1_out1,  // uint32
                                   CH_out1,  // uint32
                                   H_OUT,  // uint32
                                   Subsystem3_out1  // uint32
                                   );

  assign E_OUT = Subsystem3_out1;

  assign F_OUT = E_IN;

  assign G_OUT = F_IN;

  assign Constant_out1 = 32'b00001100001011100001001011100000;



  assign ADD8_out1 = Constant_out1 + W3;



  assign H_OUT_1 = ADD8_out1;

endmodule  // Comp_1

